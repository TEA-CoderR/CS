#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}v#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>

#ifndef BUFSIZE
#define BUFSIZE 256
#endif
#ifndef FILEIN
#define FILEIN "mycp.c"
#endif
#ifndef FILEOUT
#define FILEOUT "mycp_coppia.txt"
#endif

#define EXIT_F(m)						\
		perror(m); exit(EXIT_FAILURE);			
#define EC_MINUS1(s,m)	\
		if(s == -1) {perror(m), exit(EXIT_FAILURE);}
#define EC_NULL(s,m)	\
		if(s == NULL) {perror(m), exit(EXIT_FAILURE);}

int isNumber(const char *s){
	char* e = NULL;
	long val = strtol(s,&e,0);
	if(e != NULL && *e == (char)0) return val;
	return -1;
}
int main(int argc, char const *argv[])
{
	//if(argc != 4) EXIT_F(argv[0]);
	char *filein = FILEIN, *fileout = FILEOUT;
	long bufsize = BUFSIZE;
	if(argc == 4){
		filein = strndup(argv[1], strlen(argv[1]));
		fileout = strndup(argv[2], strlen(argv[2]));
		EC_MINUS1((bufsize = isNumber(argv[3])), "[num]");
	}
	int fdin, fdout, lun;
	char* buf = NULL;
	EC_MINUS1((fdin = open(filein, O_RDONLY)), "opening fdin");
	EC_MINUS1((fdout = open(fileout, O_CREAT | O_TRUNC | O_WRONLY, 0666)), "opening fdout");
	EC_NULL((buf = (char*)malloc(sizeof(char) * bufsize)), "malloc:buf");
	
	while((lun = read(fdin, buf, bufsize)) > 0){
		EC_MINUS1(write(fdout, buf, lun), "write");
	}
	EC_MINUS1(lun, "read");
	EC_MINUS1(close(fdin), "close:fdin");
	EC_MINUS1(close(fdout), "close:fdout");
	return 0;
}
